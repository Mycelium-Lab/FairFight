;;
;; Header files for NftShop
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $MintFromAllowedToMint$_load
(slice, ((slice, int, int))) $MintFromAllowedToMint$_load(slice sc_0) inline;

;; $NftType$_load
(slice, ((slice, cell))) $NftType$_load(slice sc_0) inline;

;; $NftType$_as_optional
tuple $NftType$_as_optional((slice, cell) v) inline;

;; $NftType$_load_opt
tuple $NftType$_load_opt(cell cl) inline;

;; $SetNftAddress$_load
(slice, ((slice))) $SetNftAddress$_load(slice sc_0) inline;

;; $SetPrices$_load
(slice, ((cell))) $SetPrices$_load(slice sc_0) inline;

;; $SetWorkStatus$_load
(slice, ((int))) $SetWorkStatus$_load(slice sc_0) inline;

;; $SetFeeCollector$_load
(slice, ((slice))) $SetFeeCollector$_load(slice sc_0) inline;

;; $Buy$_load
(slice, ((int, int))) $Buy$_load(slice sc_0) inline;

;; $ChangeNftCollectionOwner$_load
(slice, ((slice))) $ChangeNftCollectionOwner$_load(slice sc_0) inline;

;; $SetAllowedMint$_load
(slice, ((slice, int))) $SetAllowedMint$_load(slice sc_0) inline;

;; $NftShop$_store
builder $NftShop$_store(builder build_0, (slice, slice, cell, slice, int, int, cell) v) inline;

;; $NftShop$_load
(slice, ((slice, slice, cell, slice, int, int, cell))) $NftShop$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $NftType$_not_null
((slice, cell)) $NftType$_not_null(tuple v) inline;

;; $NftShop$init$_load
(slice, ((slice, slice, slice, cell, int, cell))) $NftShop$init$_load(slice sc_0) inline_ref;

;; $NftShop$_contract_init
(slice, slice, cell, slice, int, int, cell) $NftShop$_contract_init(slice $owner, slice $feeCollector, slice $nft_address, cell $prices, int $nextItemIndex, cell $allowedMint) impure inline_ref;

;; $NftShop$_contract_load
(slice, slice, cell, slice, int, int, cell) $NftShop$_contract_load() impure inline_ref;

;; $NftShop$_contract_store
() $NftShop$_contract_store((slice, slice, cell, slice, int, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $NftShop$_fun_prices
((slice, slice, cell, slice, int, int, cell), cell) $NftShop$_fun_prices((slice, slice, cell, slice, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $NftShop$_fun_forward
((slice, slice, cell, slice, int, int, cell), ()) $NftShop$_fun_forward((slice, slice, cell, slice, int, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $NftShop$_fun_reply
((slice, slice, cell, slice, int, int, cell), ()) $NftShop$_fun_reply((slice, slice, cell, slice, int, int, cell) $self, cell $body) impure inline;

;; $NftShop$_fun_notify
((slice, slice, cell, slice, int, int, cell), ()) $NftShop$_fun_notify((slice, slice, cell, slice, int, int, cell) $self, cell $body) impure inline;

;; $NftShop$_fun_requireOwner
((slice, slice, cell, slice, int, int, cell), ()) $NftShop$_fun_requireOwner((slice, slice, cell, slice, int, int, cell) $self) impure inline_ref;

;; $NftShop$_fun_owner
((slice, slice, cell, slice, int, int, cell), slice) $NftShop$_fun_owner((slice, slice, cell, slice, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline;

;; $SendParameters$_constructor_to_bounce_value_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;
