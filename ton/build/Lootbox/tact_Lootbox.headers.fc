;;
;; Header files for Lootbox
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $MintFromAllowedToMint$_store
builder $MintFromAllowedToMint$_store(builder build_0, (slice, int, int) v) inline;

;; $MintFromAllowedToMint$_store_cell
cell $MintFromAllowedToMint$_store_cell((slice, int, int) v) inline;

;; $NftItem$_load
(slice, ((int, int, slice))) $NftItem$_load(slice sc_0) inline;

;; $NftItem$_as_optional
tuple $NftItem$_as_optional((int, int, slice) v) inline;

;; $NftItem$_load_opt
tuple $NftItem$_load_opt(cell cl) inline;

;; $RarityType$_load
(slice, ((int, cell))) $RarityType$_load(slice sc_0) inline;

;; $RarityType$_as_optional
tuple $RarityType$_as_optional((int, cell) v) inline;

;; $RarityType$_load_opt
tuple $RarityType$_load_opt(cell cl) inline;

;; $SetWorkStatus$_load
(slice, ((int))) $SetWorkStatus$_load(slice sc_0) inline;

;; $SetFeeCollector$_load
(slice, ((slice))) $SetFeeCollector$_load(slice sc_0) inline;

;; $SetPrice$_load
(slice, ((int))) $SetPrice$_load(slice sc_0) inline;

;; $SetRarity$_load
(slice, ((cell))) $SetRarity$_load(slice sc_0) inline;

;; $SetNftShopAddress$_load
(slice, ((slice))) $SetNftShopAddress$_load(slice sc_0) inline;

;; $Lootbox$_store
builder $Lootbox$_store(builder build_0, (slice, int, int, slice, slice, cell, cell) v) inline;

;; $Lootbox$_load
(slice, ((slice, int, int, slice, slice, cell, cell))) $Lootbox$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $NftItem$_not_null
((int, int, slice)) $NftItem$_not_null(tuple v) inline;

;; $RarityType$_not_null
((int, cell)) $RarityType$_not_null(tuple v) inline;

;; $Lootbox$init$_load
(slice, ((slice, int, slice, slice, cell, cell))) $Lootbox$init$_load(slice sc_0) inline_ref;

;; $Lootbox$_contract_init
(slice, int, int, slice, slice, cell, cell) $Lootbox$_contract_init(slice $owner, int $price, slice $feeCollector, slice $nftShopAddress, cell $itemsByRarity, cell $rarityPercent) impure inline_ref;

;; $Lootbox$_contract_load
(slice, int, int, slice, slice, cell, cell) $Lootbox$_contract_load() impure inline_ref;

;; $Lootbox$_contract_store
() $Lootbox$_contract_store((slice, int, int, slice, slice, cell, cell) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Lootbox$_fun_forward
((slice, int, int, slice, slice, cell, cell), ()) $Lootbox$_fun_forward((slice, int, int, slice, slice, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Lootbox$_fun_reply
((slice, int, int, slice, slice, cell, cell), ()) $Lootbox$_fun_reply((slice, int, int, slice, slice, cell, cell) $self, cell $body) impure inline;

;; $Lootbox$_fun_notify
((slice, int, int, slice, slice, cell, cell), ()) $Lootbox$_fun_notify((slice, int, int, slice, slice, cell, cell) $self, cell $body) impure inline;

;; $Lootbox$_fun_requireOwner
((slice, int, int, slice, slice, cell, cell), ()) $Lootbox$_fun_requireOwner((slice, int, int, slice, slice, cell, cell) $self) impure inline_ref;

;; $Lootbox$_fun_owner
((slice, int, int, slice, slice, cell, cell), slice) $Lootbox$_fun_owner((slice, int, int, slice, slice, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $MintFromAllowedToMint$_constructor_to_nftType_nftItem
((slice, int, int)) $MintFromAllowedToMint$_constructor_to_nftType_nftItem(slice $to, int $nftType, int $nftItem) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;
