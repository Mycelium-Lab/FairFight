;;
;; Header files for FairFight
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $FightMsg$_load
(slice, ((int, int, int))) $FightMsg$_load(slice sc_0) inline;

;; $Join$_load
(slice, ((int))) $Join$_load(slice sc_0) inline;

;; $Withdraw$_store
builder $Withdraw$_store(builder build_0, (int) v) inline;

;; $Withdraw$_store_cell
cell $Withdraw$_store_cell((int) v) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $FinishData$_store
builder $FinishData$_store(builder build_0, (int, slice, slice, int) v) inline;

;; $FinishData$_store_cell
cell $FinishData$_store_cell((int, slice, slice, int) v) inline;

;; $FinishData$_load
(slice, ((int, slice, slice, int))) $FinishData$_load(slice sc_0) inline;

;; $Finish$_load
(slice, (((int, slice, slice, int), slice))) $Finish$_load(slice sc_0) inline;

;; $FightJoin$_store
builder $FightJoin$_store(builder build_0, (int, slice) v) inline;

;; $FightJoin$_store_cell
cell $FightJoin$_store_cell((int, slice) v) inline;

;; $ChangeSignerPublicKey$_load
(slice, ((int))) $ChangeSignerPublicKey$_load(slice sc_0) inline;

;; $ChangeFee$_load
(slice, ((int))) $ChangeFee$_load(slice sc_0) inline;

;; $ChangeFeeCollector$_load
(slice, ((slice))) $ChangeFeeCollector$_load(slice sc_0) inline;

;; $ChangeMaxPlayersAmount$_load
(slice, ((int))) $ChangeMaxPlayersAmount$_load(slice sc_0) inline;

;; $ChangeMaxRoundsAmount$_load
(slice, ((int))) $ChangeMaxRoundsAmount$_load(slice sc_0) inline;

;; $ChangeMinAmountPerRound$_load
(slice, ((int))) $ChangeMinAmountPerRound$_load(slice sc_0) inline;

;; $Fight$_store
builder $Fight$_store(builder build_0, (int, slice, int, int, int, int, int, int, cell, int, cell) v) inline_ref;

;; $Fight$_store_cell
cell $Fight$_store_cell((int, slice, int, int, int, int, int, int, cell, int, cell) v) inline;

;; $Fight$_load
(slice, ((int, slice, int, int, int, int, int, int, cell, int, cell))) $Fight$_load(slice sc_0) inline_ref;

;; $Fight$_as_optional
tuple $Fight$_as_optional((int, slice, int, int, int, int, int, int, cell, int, cell) v) inline;

;; $Fight$_load_opt
tuple $Fight$_load_opt(cell cl) inline;

;; $FairFight$_store
builder $FairFight$_store(builder build_0, (slice, int, slice, int, int, int, int, cell, int, int, cell) v) inline;

;; $FairFight$_load
(slice, ((slice, int, slice, int, int, int, int, cell, int, int, cell))) $FairFight$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Fight$_not_null
((int, slice, int, int, int, int, int, int, cell, int, cell)) $Fight$_not_null(tuple v) inline;

;; $Fight$_to_tuple
tuple $Fight$_to_tuple(((int, slice, int, int, int, int, int, int, cell, int, cell)) v) inline;

;; $Fight$_to_external
tuple $Fight$_to_external(((int, slice, int, int, int, int, int, int, cell, int, cell)) v) inline;

;; $Fee$_to_tuple
tuple $Fee$_to_tuple(((int, int)) v) inline;

;; $Fee$_to_external
tuple $Fee$_to_external(((int, int)) v) inline;

;; $FairFight$init$_load
(slice, ((slice, int, slice, int, int, int, int))) $FairFight$init$_load(slice sc_0) inline_ref;

;; $FairFight$_contract_init
(slice, int, slice, int, int, int, int, cell, int, int, cell) $FairFight$_contract_init(slice $owner, int $signerPublicKey, slice $feeCollector, int $fee, int $maxPlayers, int $maxRounds, int $minAmountPerRound) impure inline_ref;

;; $FairFight$_contract_load
(slice, int, slice, int, int, int, int, cell, int, int, cell) $FairFight$_contract_load() impure inline_ref;

;; $FairFight$_contract_store
() $FairFight$_contract_store((slice, int, slice, int, int, int, int, cell, int, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Fight$_constructor_id_owner_createTime_finishTime_baseAmount_amountPerRound_rounds_maxPlayersAmount_playersCurrentLength_players_playersClaimed
((int, slice, int, int, int, int, int, int, cell, int, cell)) $Fight$_constructor_id_owner_createTime_finishTime_baseAmount_amountPerRound_rounds_maxPlayersAmount_playersCurrentLength_players_playersClaimed(int $id, slice $owner, int $createTime, int $finishTime, int $baseAmount, int $amountPerRound, int $rounds, int $maxPlayersAmount, int $playersCurrentLength, cell $players, cell $playersClaimed) inline;

;; $FairFight$_fun_create
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_create((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, (int, int, int) $fightMsg) impure inline_ref;

;; $FightJoin$_constructor_id_joiner
((int, slice)) $FightJoin$_constructor_id_joiner(int $id, slice $joiner) inline;

;; $FairFight$_fun_join
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_join((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, int $id) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline;

;; $Withdraw$_constructor_id
((int)) $Withdraw$_constructor_id(int $id) inline;

;; $FairFight$_fun_withdraw
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_withdraw((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, int $id) impure inline_ref;

;; $Fee$_constructor_amount_fee
((int, int)) $Fee$_constructor_amount_fee(int $amount, int $fee) inline;

;; $FairFight$_fun_feeCalc
((slice, int, slice, int, int, int, int, cell, int, int, cell), (int, int)) $FairFight$_fun_feeCalc((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, int $baseAmount, int $amount) impure inline_ref;

;; $FairFight$_fun_finish
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_finish((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, ((int, slice, slice, int), slice) $finishMsg) impure inline_ref;

;; $FairFight$_fun_currentFights
((slice, int, slice, int, int, int, int, cell, int, int, cell), cell) $FairFight$_fun_currentFights((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $FairFight$_fun_currentFight
((slice, int, slice, int, int, int, int, cell, int, int, cell), (int, slice, int, int, int, int, int, int, cell, int, cell)) $FairFight$_fun_currentFight((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, int $id) impure inline_ref;

;; $FairFight$_fun_currentFightPlayers
((slice, int, slice, int, int, int, int, cell, int, int, cell), cell) $FairFight$_fun_currentFightPlayers((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, int $id) impure inline_ref;

;; $FairFight$_fun_currentFightPlayerClaimed
((slice, int, slice, int, int, int, int, cell, int, int, cell), int) $FairFight$_fun_currentFightPlayerClaimed((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, int $id, slice $player) impure inline_ref;

;; $FairFight$_fun_fee
((slice, int, slice, int, int, int, int, cell, int, int, cell), int) $FairFight$_fun_fee((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $FairFight$_fun_maxPlayers
((slice, int, slice, int, int, int, int, cell, int, int, cell), int) $FairFight$_fun_maxPlayers((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $FairFight$_fun_maxRounds
((slice, int, slice, int, int, int, int, cell, int, int, cell), int) $FairFight$_fun_maxRounds((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $FairFight$_fun_minAmountPerRound
((slice, int, slice, int, int, int, int, cell, int, int, cell), int) $FairFight$_fun_minAmountPerRound((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $FairFight$_fun_currentPlayerFight
((slice, int, slice, int, int, int, int, cell, int, int, cell), int) $FairFight$_fun_currentPlayerFight((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, slice $player) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $FairFight$_fun_forward
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_forward((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $FairFight$_fun_reply
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_reply((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, cell $body) impure inline;

;; $FairFight$_fun_notify
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_notify((slice, int, slice, int, int, int, int, cell, int, int, cell) $self, cell $body) impure inline;

;; $FairFight$_fun_requireOwner
((slice, int, slice, int, int, int, int, cell, int, int, cell), ()) $FairFight$_fun_requireOwner((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $FairFight$_fun_owner
((slice, int, slice, int, int, int, int, cell, int, int, cell), slice) $FairFight$_fun_owner((slice, int, slice, int, int, int, int, cell, int, int, cell) $self) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;
