;;
;; Header files for NftItem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $Transfer$_load
(slice, ((int, slice, slice, cell, int, slice))) $Transfer$_load(slice sc_0) inline_ref;

;; $OwnershipAssigned$_store
builder $OwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline;

;; $OwnershipAssigned$_store_cell
cell $OwnershipAssigned$_store_cell((int, slice, slice) v) inline;

;; $Excesses$_store
builder $Excesses$_store(builder build_0, (int) v) inline;

;; $Excesses$_store_cell
cell $Excesses$_store_cell((int) v) inline;

;; $GetStaticData$_load
(slice, ((int))) $GetStaticData$_load(slice sc_0) inline;

;; $ReportStaticData$_store
builder $ReportStaticData$_store(builder build_0, (int, int, slice) v) inline;

;; $ReportStaticData$_store_cell
cell $ReportStaticData$_store_cell((int, int, slice) v) inline;

;; $SetItemType$_load
(slice, ((int, int, slice))) $SetItemType$_load(slice sc_0) inline;

;; $NftItem$_store
builder $NftItem$_store(builder build_0, (slice, int, int, slice, cell, int, int, slice) v) inline;

;; $NftItem$_load
(slice, ((slice, int, int, slice, cell, int, int, slice))) $NftItem$_load(slice sc_0) inline;

;; $GetNftData$_to_tuple
tuple $GetNftData$_to_tuple(((int, int, slice, slice, cell)) v) inline;

;; $GetNftData$_to_external
tuple $GetNftData$_to_external(((int, int, slice, slice, cell)) v) inline;

;; $GetItemType$_to_tuple
tuple $GetItemType$_to_tuple(((int, int, slice)) v) inline;

;; $GetItemType$_to_external
tuple $GetItemType$_to_external(((int, int, slice)) v) inline;

;; $NftItem$init$_load
(slice, ((slice, int))) $NftItem$init$_load(slice sc_0) inline;

;; $NftItem$_contract_init
(slice, int, int, slice, cell, int, int, slice) $NftItem$_contract_init(slice $collection_address, int $item_index) impure inline_ref;

;; $NftItem$_contract_load
(slice, int, int, slice, cell, int, int, slice) $NftItem$_contract_load() impure inline_ref;

;; $NftItem$_contract_store
() $NftItem$_contract_store((slice, int, int, slice, cell, int, int, slice) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $NftItem$_fun_msgValue
((slice, int, int, slice, cell, int, int, slice), int) $NftItem$_fun_msgValue((slice, int, int, slice, cell, int, int, slice) $self, int $value) impure inline_ref;

;; $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content
((int, int, slice, slice, cell)) $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content(int $is_initialized, int $index, slice $collection_address, slice $owner_address, cell $individual_content) inline;

;; $NftItem$_fun_get_nft_data
((slice, int, int, slice, cell, int, int, slice), (int, int, slice, slice, cell)) $NftItem$_fun_get_nft_data((slice, int, int, slice, cell, int, int, slice) $self) impure inline_ref;

;; $GetItemType$_constructor_type_type_index_type_data
((int, int, slice)) $GetItemType$_constructor_type_type_index_type_data(int $type, int $type_index, slice $type_data) inline;

;; $NftItem$_fun_get_nft_item_type
((slice, int, int, slice, cell, int, int, slice), (int, int, slice)) $NftItem$_fun_get_nft_item_type((slice, int, int, slice, cell, int, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload
((int, slice, slice)) $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int $query_id, slice $prev_owner, slice $forward_payload) inline;

;; $Excesses$_constructor_query_id
((int)) $Excesses$_constructor_query_id(int $query_id) inline;

;; $ReportStaticData$_constructor_query_id_index_id_collection
((int, int, slice)) $ReportStaticData$_constructor_query_id_index_id_collection(int $query_id, int $index_id, slice $collection) inline;
